// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expenses   Expense[]
  incomes    Income[]
  categories Category[]
  sources    Source[]
  budgets    Budget[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        CategoryType // EXPENSE or INCOME
  color       String?  @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]
  incomes  Income[]
  budgets  Budget[]

  @@unique([userId, name])
  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  date        DateTime @default(now())
  userId      String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Income {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  date        DateTime @default(now())
  userId      String
  categoryId  String?
  sourceId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  source   Source?  @relation(fields: [sourceId], references: [id], onDelete: SetNull)

  @@map("incomes")
}

model Source {
  id        String   @id @default(cuid())
  name      String
  color     String?  @default("#3B82F6")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  incomes Income[]

  @@unique([userId, name])
  @@map("sources")
}

model Budget {
  id         String   @id @default(cuid())
  amount     Float
  period     BudgetPeriod // MONTHLY, WEEKLY, YEARLY
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum BudgetPeriod {
  MONTHLY
  WEEKLY
  YEARLY
}